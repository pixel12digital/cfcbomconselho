/**
 * Script espec√≠fico para corrigir problema de √≠cones de edi√ß√£o aparecendo sobre modais
 * For√ßa o escondimento de √≠cones de edi√ß√£o quando modais est√£o abertos
 */

// Fun√ß√£o para esconder √≠cones de edi√ß√£o quando modal estiver aberto
function esconderIconesEdicao() {
    console.log('üîß Escondendo √≠cones de edi√ß√£o...');
    
    // Selecionar todos os √≠cones de edi√ß√£o que n√£o est√£o dentro de modais
    const iconesEdicao = document.querySelectorAll('i.fas.fa-edit:not([id*="modal"]):not([class*="modal"]):not([class*="popup"])');
    const iconesPencil = document.querySelectorAll('i.fas.fa-pencil:not([id*="modal"]):not([class*="modal"]):not([class*="popup"])');
    const iconesPencilAlt = document.querySelectorAll('i.fas.fa-pencil-alt:not([id*="modal"]):not([class*="modal"]):not([class*="popup"])');
    const editIcons = document.querySelectorAll('.edit-icon:not([id*="modal"]):not([class*="modal"]):not([class*="popup"])');
    
    // Combinar todos os seletores
    const todosIcones = [...iconesEdicao, ...iconesPencil, ...iconesPencilAlt, ...editIcons];
    
    todosIcones.forEach(icon => {
        // Verificar se o √≠cone n√£o est√° dentro de um modal
        if (!icon.closest('[id*="modal"]') && !icon.closest('[class*="modal"]') && !icon.closest('[class*="popup"]')) {
            icon.style.cssText = `
                display: none !important;
                visibility: hidden !important;
                opacity: 0 !important;
                z-index: -1 !important;
                position: absolute !important;
                left: -9999px !important;
                top: -9999px !important;
            `;
            console.log('‚úÖ √çcone escondido:', icon);
        }
    });
    
    console.log(`üîß Total de √≠cones escondidos: ${todosIcones.length}`);
}

// Fun√ß√£o para restaurar √≠cones de edi√ß√£o quando modal for fechado
function restaurarIconesEdicao() {
    console.log('üîß Restaurando √≠cones de edi√ß√£o...');
    
    // Selecionar todos os √≠cones de edi√ß√£o que foram escondidos
    const todosIcones = document.querySelectorAll('i.fas.fa-edit, i.fas.fa-pencil, i.fas.fa-pencil-alt, .edit-icon');
    
    todosIcones.forEach(icon => {
        // Verificar se o √≠cone n√£o est√° dentro de um modal
        if (!icon.closest('[id*="modal"]') && !icon.closest('[class*="modal"]') && !icon.closest('[class*="popup"]')) {
            icon.style.cssText = '';
            console.log('‚úÖ √çcone restaurado:', icon);
        }
    });
    
    console.log(`üîß Total de √≠cones restaurados: ${todosIcones.length}`);
}

// Fun√ß√£o para verificar se h√° modais abertos
function verificarModaisAbertos() {
    const modais = document.querySelectorAll('[id*="modal"], [class*="modal"], [class*="popup"]');
    let modalAberto = false;
    
    modais.forEach(modal => {
        const style = window.getComputedStyle(modal);
        if (style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0') {
            modalAberto = true;
        }
    });
    
    return modalAberto;
}

// Observer para detectar mudan√ßas no DOM (modais sendo abertos/fechados)
const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
            // Verificar se um modal foi adicionado ou removido
            const modalAberto = verificarModaisAbertos();
            
            if (modalAberto) {
                setTimeout(esconderIconesEdicao, 100); // Delay para garantir que o modal foi renderizado
            } else {
                setTimeout(restaurarIconesEdicao, 100);
            }
        }
    });
});

// Observer para detectar mudan√ßas nos atributos dos modais
const attributeObserver = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && (mutation.attributeName === 'style' || mutation.attributeName === 'class')) {
            const modalAberto = verificarModaisAbertos();
            
            if (modalAberto) {
                setTimeout(esconderIconesEdicao, 100);
            } else {
                setTimeout(restaurarIconesEdicao, 100);
            }
        }
    });
});

// Fun√ß√£o para inicializar o sistema
function inicializarCorrecaoIcones() {
    console.log('üîß Inicializando corre√ß√£o de √≠cones de edi√ß√£o...');
    
    // Iniciar observadores
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    // Observar mudan√ßas nos atributos dos modais
    document.querySelectorAll('[id*="modal"], [class*="modal"], [class*="popup"]').forEach(modal => {
        attributeObserver.observe(modal, {
            attributes: true,
            attributeFilter: ['style', 'class']
        });
    });
    
    // Verificar estado inicial
    if (verificarModaisAbertos()) {
        esconderIconesEdicao();
    }
    
    console.log('‚úÖ Sistema de corre√ß√£o de √≠cones inicializado');
}

// Fun√ß√£o para for√ßar corre√ß√£o imediata
function forcarCorrecaoIcones() {
    console.log('üîß For√ßando corre√ß√£o de √≠cones...');
    esconderIconesEdicao();
}

// Inicializar quando o DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', inicializarCorrecaoIcones);
} else {
    inicializarCorrecaoIcones();
}

// Tornar fun√ß√µes globalmente acess√≠veis
window.esconderIconesEdicao = esconderIconesEdicao;
window.restaurarIconesEdicao = restaurarIconesEdicao;
window.forcarCorrecaoIcones = forcarCorrecaoIcones;
