<?php
/**
 * TESTE #4: CRUD de Usu√°rios
 * Este teste verifica se as opera√ß√µes Create, Read, Update, Delete est√£o funcionando
 */

// Configura√ß√µes de teste
$erros = [];
$sucessos = [];
$avisos = [];

echo "<h1>üîç TESTE #4: CRUD de Usu√°rios</h1>";
echo "<p><strong>Data/Hora:</strong> " . date('d/m/Y H:i:s') . "</p>";
echo "<p><strong>Ambiente:</strong> " . ($_SERVER['SERVER_PORT'] == '8080' ? 'XAMPP Local (Porta 8080)' : 'Produ√ß√£o') . "</p>";
echo "<hr>";

// Teste 4.1: Verificar se conseguimos incluir os arquivos necess√°rios
echo "<h2>4.1 Inclus√£o de Arquivos Necess√°rios</h2>";

try {
    require_once '../includes/config.php';
    require_once '../includes/database.php';
    require_once '../includes/models/UserModel.php';
    
    echo "‚úÖ <strong>Arquivos necess√°rios</strong> - INCLU√çDOS COM SUCESSO<br>";
    $sucessos[] = "Arquivos necess√°rios inclu√≠dos";
} catch (Exception $e) {
    echo "‚ùå <strong>Erro ao incluir arquivos</strong> - " . $e->getMessage() . "<br>";
    $erros[] = "Erro ao incluir arquivos: " . $e->getMessage();
}

// Teste 4.2: Verificar conex√£o com banco
echo "<h2>4.2 Conex√£o com Banco de Dados</h2>";

try {
    $pdo = new PDO(
        "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4",
        DB_USER,
        DB_PASS,
        [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
        ]
    );
    
    echo "‚úÖ <strong>Conex√£o PDO</strong> - ESTABELECIDA COM SUCESSO<br>";
    $sucessos[] = "Conex√£o PDO estabelecida";
    
} catch (PDOException $e) {
    echo "‚ùå <strong>Erro na conex√£o PDO</strong> - " . $e->getMessage() . "<br>";
    $erros[] = "Erro na conex√£o PDO: " . $e->getMessage();
}

// Teste 4.3: Verificar estrutura da tabela usuarios
echo "<h2>4.3 Estrutura da Tabela 'usuarios'</h2>";

if (isset($pdo)) {
    try {
        $stmt = $pdo->query("DESCRIBE usuarios");
        $colunas = $stmt->fetchAll();
        
        $colunas_necessarias = ['id', 'nome', 'email', 'senha', 'tipo', 'status', 'created_at', 'updated_at'];
        $colunas_encontradas = array_column($colunas, 'Field');
        
        $colunas_faltando = array_diff($colunas_necessarias, $colunas_encontradas);
        
        if (empty($colunas_faltando)) {
            echo "‚úÖ <strong>Estrutura da tabela</strong> - COMPLETA<br>";
            $sucessos[] = "Estrutura da tabela usuarios completa";
        } else {
            echo "‚ö†Ô∏è <strong>Estrutura da tabela</strong> - FALTANDO: " . implode(', ', $colunas_faltando) . "<br>";
            $avisos[] = "Estrutura da tabela usuarios incompleta: " . implode(', ', $colunas_faltando);
        }
        
        // Mostrar estrutura atual
        echo "<details style='margin: 10px 0;'>";
        echo "<summary style='cursor: pointer; color: #007bff;'>üìã Ver estrutura atual da tabela</summary>";
        echo "<table border='1' style='border-collapse: collapse; width: 100%; margin: 10px 0; font-size: 12px;'>";
        echo "<tr style='background: #f8f9fa;'><th>Campo</th><th>Tipo</th><th>Nulo</th><th>Padr√£o</th></tr>";
        
        foreach ($colunas as $coluna) {
            echo "<tr>";
            echo "<td>" . htmlspecialchars($coluna['Field']) . "</td>";
            echo "<td>" . htmlspecialchars($coluna['Type']) . "</td>";
            echo "<td>" . htmlspecialchars($coluna['Null']) . "</td>";
            echo "<td>" . htmlspecialchars($coluna['Default'] ?? 'NULL') . "</td>";
            echo "</tr>";
        }
        echo "</table>";
        echo "</details>";
        
    } catch (Exception $e) {
        echo "‚ùå <strong>Erro ao verificar estrutura</strong> - " . $e->getMessage() . "<br>";
        $erros[] = "Erro ao verificar estrutura: " . $e->getMessage();
    }
}

// Teste 4.4: Verificar se a classe UserModel est√° funcionando
echo "<h2>4.4 Verifica√ß√£o da Classe UserModel</h2>";

if (class_exists('UserModel')) {
    try {
        $userModel = new UserModel($pdo);
        echo "‚úÖ <strong>Inst√¢ncia UserModel</strong> - CRIADA COM SUCESSO<br>";
        $sucessos[] = "Inst√¢ncia UserModel criada";
        
        // Verificar m√©todos
        $metodos_necessarios = ['findByEmail', 'findById', 'findAll', 'create', 'update', 'delete', 'authenticate'];
        $metodos_encontrados = get_class_methods('UserModel');
        
        $metodos_faltando = array_diff($metodos_necessarios, $metodos_encontrados);
        
        if (empty($metodos_faltando)) {
            echo "‚úÖ <strong>M√©todos UserModel</strong> - TODOS IMPLEMENTADOS<br>";
            $sucessos[] = "Todos os m√©todos UserModel implementados";
        } else {
            echo "‚ö†Ô∏è <strong>M√©todos UserModel</strong> - FALTANDO: " . implode(', ', $metodos_faltando) . "<br>";
            $avisos[] = "M√©todos UserModel faltando: " . implode(', ', $metodos_faltando);
        }
        
    } catch (Exception $e) {
        echo "‚ùå <strong>Erro ao criar UserModel</strong> - " . $e->getMessage() . "<br>";
        $erros[] = "Erro ao criar UserModel: " . $e->getMessage();
    }
} else {
    echo "‚ùå <strong>Classe UserModel</strong> - N√ÉO ENCONTRADA<br>";
    $erros[] = "Classe UserModel n√£o encontrada";
}

// Teste 4.5: Teste de CRUD - CREATE (Criar usu√°rio)
echo "<h2>4.5 Teste CREATE - Criar Usu√°rio</h2>";

if (isset($userModel)) {
    try {
        // Dados de teste para criar usu√°rio
        $dados_teste = [
            'nome' => 'Usu√°rio Teste CRUD',
            'email' => 'teste.crud@cfc.com',
            'senha' => 'senha123',
            'tipo' => 'instrutor',
            'status' => 'ativo'
        ];
        
        // Tentar criar usu√°rio
        $resultado = $userModel->create($dados_teste);
        
        if ($resultado) {
            echo "‚úÖ <strong>CREATE</strong> - USU√ÅRIO CRIADO COM SUCESSO<br>";
            $sucessos[] = "Usu√°rio criado com sucesso";
            
            // Buscar o usu√°rio criado para obter o ID
            $usuario_criado = $userModel->findByEmail($dados_teste['email']);
            if ($usuario_criado) {
                $id_teste = $usuario_criado['id'];
                echo "‚úÖ <strong>ID do usu√°rio criado</strong> - $id_teste<br>";
                $sucessos[] = "ID do usu√°rio obtido: $id_teste";
            }
            
        } else {
            echo "‚ùå <strong>CREATE</strong> - FALHOU AO CRIAR USU√ÅRIO<br>";
            $erros[] = "Falha ao criar usu√°rio";
        }
        
    } catch (Exception $e) {
        echo "‚ùå <strong>Erro no CREATE</strong> - " . $e->getMessage() . "<br>";
        $erros[] = "Erro no CREATE: " . $e->getMessage();
    }
}

// Teste 4.6: Teste de CRUD - READ (Ler usu√°rio)
echo "<h2>4.6 Teste READ - Ler Usu√°rio</h2>";

if (isset($userModel) && isset($id_teste)) {
    try {
        // Buscar usu√°rio por ID
        $usuario_lido = $userModel->findById($id_teste);
        
        if ($usuario_lido) {
            echo "‚úÖ <strong>READ por ID</strong> - USU√ÅRIO ENCONTRADO<br>";
            echo "üìã <strong>Dados:</strong> Nome: " . htmlspecialchars($usuario_lido['nome']) . 
                 ", Email: " . htmlspecialchars($usuario_lido['email']) . 
                 ", Tipo: " . htmlspecialchars($usuario_lido['tipo']) . "<br>";
            $sucessos[] = "Usu√°rio lido por ID com sucesso";
        } else {
            echo "‚ùå <strong>READ por ID</strong> - USU√ÅRIO N√ÉO ENCONTRADO<br>";
            $erros[] = "Usu√°rio n√£o encontrado por ID";
        }
        
        // Buscar usu√°rio por email
        $usuario_email = $userModel->findByEmail('teste.crud@cfc.com');
        
        if ($usuario_email) {
            echo "‚úÖ <strong>READ por Email</strong> - USU√ÅRIO ENCONTRADO<br>";
            $sucessos[] = "Usu√°rio lido por email com sucesso";
        } else {
            echo "‚ùå <strong>READ por Email</strong> - USU√ÅRIO N√ÉO ENCONTRADO<br>";
            $erros[] = "Usu√°rio n√£o encontrado por email";
        }
        
        // Listar todos os usu√°rios
        $todos_usuarios = $userModel->findAll();
        
        if (is_array($todos_usuarios)) {
            echo "‚úÖ <strong>READ ALL</strong> - " . count($todos_usuarios) . " USU√ÅRIOS ENCONTRADOS<br>";
            $sucessos[] = "Listagem de usu√°rios funcionando";
        } else {
            echo "‚ùå <strong>READ ALL</strong> - FALHOU AO LISTAR USU√ÅRIOS<br>";
            $erros[] = "Falha ao listar usu√°rios";
        }
        
    } catch (Exception $e) {
        echo "‚ùå <strong>Erro no READ</strong> - " . $e->getMessage() . "<br>";
        $erros[] = "Erro no READ: " . $e->getMessage();
    }
}

// Teste 4.7: Teste de CRUD - UPDATE (Atualizar usu√°rio)
echo "<h2>4.7 Teste UPDATE - Atualizar Usu√°rio</h2>";

if (isset($userModel) && isset($id_teste)) {
    try {
        // Dados para atualiza√ß√£o
        $dados_atualizacao = [
            'nome' => 'Usu√°rio Teste CRUD ATUALIZADO',
            'email' => 'teste.crud.atualizado@cfc.com',
            'tipo' => 'admin',
            'status' => 'ativo'
        ];
        
        // Atualizar usu√°rio
        $resultado_update = $userModel->update($id_teste, $dados_atualizacao);
        
        if ($resultado_update) {
            echo "‚úÖ <strong>UPDATE</strong> - USU√ÅRIO ATUALIZADO COM SUCESSO<br>";
            $sucessos[] = "Usu√°rio atualizado com sucesso";
            
            // Verificar se a atualiza√ß√£o foi feita
            $usuario_atualizado = $userModel->findById($id_teste);
            if ($usuario_atualizado && $usuario_atualizado['nome'] === $dados_atualizacao['nome']) {
                echo "‚úÖ <strong>Verifica√ß√£o UPDATE</strong> - DADOS CONFIRMADOS<br>";
                $sucessos[] = "Verifica√ß√£o de atualiza√ß√£o confirmada";
            } else {
                echo "‚ö†Ô∏è <strong>Verifica√ß√£o UPDATE</strong> - DADOS N√ÉO CONFIRMADOS<br>";
                $avisos[] = "Verifica√ß√£o de atualiza√ß√£o n√£o confirmada";
            }
            
        } else {
            echo "‚ùå <strong>UPDATE</strong> - FALHOU AO ATUALIZAR USU√ÅRIO<br>";
            $erros[] = "Falha ao atualizar usu√°rio";
        }
        
    } catch (Exception $e) {
        echo "‚ùå <strong>Erro no UPDATE</strong> - " . $e->getMessage() . "<br>";
        $erros[] = "Erro no UPDATE: " . $e->getMessage();
    }
}

// Teste 4.8: Teste de CRUD - DELETE (Excluir usu√°rio)
echo "<h2>4.8 Teste DELETE - Excluir Usu√°rio</h2>";

if (isset($userModel) && isset($id_teste)) {
    try {
        // Excluir usu√°rio de teste
        $resultado_delete = $userModel->delete($id_teste);
        
        if ($resultado_delete) {
            echo "‚úÖ <strong>DELETE</strong> - USU√ÅRIO EXCLU√çDO COM SUCESSO<br>";
            $sucessos[] = "Usu√°rio exclu√≠do com sucesso";
            
            // Verificar se foi realmente exclu√≠do
            $usuario_excluido = $userModel->findById($id_teste);
            if (!$usuario_excluido) {
                echo "‚úÖ <strong>Verifica√ß√£o DELETE</strong> - USU√ÅRIO N√ÉO ENCONTRADO (EXCLU√çDO)<br>";
                $sucessos[] = "Verifica√ß√£o de exclus√£o confirmada";
            } else {
                echo "‚ö†Ô∏è <strong>Verifica√ß√£o DELETE</strong> - USU√ÅRIO AINDA ENCONTRADO<br>";
                $avisos[] = "Verifica√ß√£o de exclus√£o n√£o confirmada";
            }
            
        } else {
            echo "‚ùå <strong>DELETE</strong> - FALHOU AO EXCLUIR USU√ÅRIO<br>";
            $erros[] = "Falha ao excluir usu√°rio";
        }
        
    } catch (Exception $e) {
        echo "‚ùå <strong>Erro no DELETE</strong> - " . $e->getMessage() . "<br>";
        $erros[] = "Erro no DELETE: " . $e->getMessage();
    }
}

// Teste 4.9: Teste de Autentica√ß√£o
echo "<h2>4.9 Teste de Autentica√ß√£o</h2>";

if (isset($userModel)) {
    try {
        // Criar usu√°rio para teste de autentica√ß√£o
        $dados_auth = [
            'nome' => 'Usu√°rio Auth Teste',
            'email' => 'auth.teste@cfc.com',
            'senha' => 'senha123',
            'tipo' => 'instrutor',
            'status' => 'ativo'
        ];
        
        $userModel->create($dados_auth);
        $usuario_auth = $userModel->findByEmail($dados_auth['email']);
        
        if ($usuario_auth) {
            // Testar autentica√ß√£o com senha correta
            $auth_sucesso = $userModel->authenticate($dados_auth['email'], $dados_auth['senha']);
            
            if ($auth_sucesso) {
                echo "‚úÖ <strong>Autentica√ß√£o</strong> - LOGIN COM SUCESSO<br>";
                $sucessos[] = "Autentica√ß√£o funcionando";
            } else {
                echo "‚ùå <strong>Autentica√ß√£o</strong> - FALHOU NO LOGIN<br>";
                $erros[] = "Falha na autentica√ß√£o";
            }
            
            // Testar autentica√ß√£o com senha incorreta
            $auth_falha = $userModel->authenticate($dados_auth['email'], 'senha_errada');
            
            if (!$auth_falha) {
                echo "‚úÖ <strong>Valida√ß√£o de Senha</strong> - SENHA INCORRETA REJEITADA<br>";
                $sucessos[] = "Valida√ß√£o de senha incorreta funcionando";
            } else {
                echo "‚ùå <strong>Valida√ß√£o de Senha</strong> - SENHA INCORRETA ACEITA<br>";
                $erros[] = "Valida√ß√£o de senha incorreta falhou";
            }
            
            // Limpar usu√°rio de teste
            $userModel->delete($usuario_auth['id']);
            
        } else {
            echo "‚ö†Ô∏è <strong>Usu√°rio para teste de auth</strong> - N√ÉO CRIADO<br>";
            $avisos[] = "Usu√°rio para teste de autentica√ß√£o n√£o criado";
        }
        
    } catch (Exception $e) {
        echo "‚ùå <strong>Erro no teste de autentica√ß√£o</strong> - " . $e->getMessage() . "<br>";
        $erros[] = "Erro no teste de autentica√ß√£o: " . $e->getMessage();
    }
}

// Resumo dos Testes
echo "<hr>";
echo "<h2>üìä RESUMO DOS TESTES</h2>";

echo "<div style='background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 10px 0;'>";
echo "<h3>‚úÖ SUCESSOS (" . count($sucessos) . ")</h3>";
foreach ($sucessos as $sucesso) {
    echo "‚Ä¢ $sucesso<br>";
}
echo "</div>";

if (count($avisos) > 0) {
    echo "<div style='background: #fff3cd; padding: 15px; border-radius: 5px; margin: 10px 0;'>";
    echo "<h3>‚ö†Ô∏è AVISOS (" . count($avisos) . ")</h3>";
    foreach ($avisos as $aviso) {
        echo "‚Ä¢ $aviso<br>";
    }
    echo "</div>";
}

if (count($erros) > 0) {
    echo "<div style='background: #ffe8e8; padding: 15px; border-radius: 5px; margin: 10px 0;'>";
    echo "<h3>‚ùå ERROS (" . count($erros) . ")</h3>";
    foreach ($erros as $erro) {
        echo "‚Ä¢ $erro<br>";
    }
    echo "</div>";
}

// Status Final
$total_testes = count($sucessos) + count($erros);
$percentual_sucesso = $total_testes > 0 ? round(($total_testes - count($erros)) / $total_testes * 100, 1) : 0;

echo "<div style='background: " . (count($erros) == 0 ? '#d4edda' : '#f8d7da') . "; padding: 15px; border-radius: 5px; margin: 10px 0;'>";
echo "<h3>üéØ STATUS FINAL</h3>";
echo "<strong>Total de Testes:</strong> $total_testes<br>";
echo "<strong>Sucessos:</strong> " . count($sucessos) . "<br>";
echo "<strong>Erros:</strong> " . count($erros) . "<br>";
echo "<strong>Avisos:</strong> " . count($avisos) . "<br>";
echo "<strong>Taxa de Sucesso:</strong> $percentual_sucesso%<br>";

if (count($erros) == 0) {
    echo "<br><strong style='color: #155724;'>üéâ TODOS OS TESTES PASSARAM! Sistema pronto para pr√≥ximo teste.</strong>";
} else {
    echo "<br><strong style='color: #721c24;'>‚ö†Ô∏è Existem erros que precisam ser corrigidos antes de prosseguir.</strong>";
}
echo "</div>";

// Pr√≥ximo Passo
echo "<hr>";
echo "<h2>üîÑ PR√ìXIMO PASSO</h2>";
if (count($erros) == 0) {
    echo "<p>‚úÖ <strong>TESTE #4 CONCLU√çDO COM SUCESSO!</strong></p>";
    echo "<p>üéØ <strong>Pr√≥ximo:</strong> TESTE #5 - CRUD de CFCs</p>";
    echo "<p>üìù <strong>Instru√ß√£o:</strong> Execute este teste e me informe o resultado. Se tudo estiver OK, criarei o pr√≥ximo teste.</p>";
} else {
    echo "<p>‚ùå <strong>TESTE #4 COM ERROS!</strong></p>";
    echo "<p>üîß <strong>A√ß√£o Necess√°ria:</strong> Corrija os erros listados acima e execute novamente.</p>";
    echo "<p>üìù <strong>Instru√ß√£o:</strong> Me informe quais erros apareceram para que eu possa ajudar a corrigi-los.</p>";
}

// Informa√ß√µes adicionais
echo "<hr>";
echo "<h2>üí° INFORMA√á√ïES ADICIONAIS</h2>";
echo "<p><strong>URL de Teste:</strong> <code>http://localhost:8080/cfc-bom-conselho/admin/teste-04-crud-usuarios.php</code></p>";
echo "<p><strong>Funcionalidades Testadas:</strong> CREATE, READ, UPDATE, DELETE, Autentica√ß√£o</p>";
echo "<p><strong>Arquivos Utilizados:</strong> UserModel, Database, Config</p>";
echo "<p><strong>Opera√ß√µes CRUD:</strong> Inserir, Buscar, Atualizar, Excluir usu√°rios</p>";
?>

<style>
body { font-family: Arial, sans-serif; margin: 20px; }
h1 { color: #2c3e50; }
h2 { color: #34495e; margin-top: 30px; }
h3 { color: #7f8c8d; }
hr { border: 1px solid #ecf0f1; margin: 20px 0; }
table { font-size: 12px; }
th { padding: 6px; background: #f8f9fa; }
td { padding: 4px; text-align: center; }
details { margin: 10px 0; }
summary { cursor: pointer; color: #007bff; }
</style>
